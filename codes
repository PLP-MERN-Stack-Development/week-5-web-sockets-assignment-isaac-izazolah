/*
📁 Project Structure:
- server/
  - index.js (Express + Socket.io server)
- client/
  - src/
    - App.jsx
    - index.js
    - components/
      - ChatRoom.jsx
  - package.json
*/

// -----------------------------
// server/index.js
// -----------------------------
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const cors = require('cors');

const app = express();
app.use(cors());

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: 'http://localhost:3000',
    methods: ['GET', 'POST'],
  },
});

let onlineUsers = new Map();

io.on('connection', (socket) => {
  console.log('A user connected:', socket.id);

  socket.on('join', (username) => {
    socket.username = username;
    onlineUsers.set(socket.id, username);
    io.emit('onlineUsers', Array.from(onlineUsers.values()));
    socket.broadcast.emit('notification', `${username} joined the chat`);
  });

  socket.on('chatMessage', ({ username, message }) => {
    const timestamp = new Date().toLocaleTimeString();
    io.emit('chatMessage', { username, message, timestamp });
  });

  socket.on('typing', (username) => {
    socket.broadcast.emit('typing', username);
  });

  socket.on('disconnect', () => {
    const username = socket.username;
    onlineUsers.delete(socket.id);
    io.emit('onlineUsers', Array.from(onlineUsers.values()));
    socket.broadcast.emit('notification', `${username} left the chat`);
    console.log('A user disconnected:', socket.id);
  });
});

server.listen(5000, () => {
  console.log('Server listening on http://localhost:5000');
});


// -----------------------------
// client/src/index.js
// -----------------------------
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


// -----------------------------
// client/src/App.jsx
// -----------------------------
import React, { useState } from 'react';
import ChatRoom from './components/ChatRoom';

const App = () => {
  const [username, setUsername] = useState('');
  const [joined, setJoined] = useState(false);

  const handleJoin = () => {
    if (username.trim()) setJoined(true);
  };

  return (
    <div>
      {joined ? (
        <ChatRoom username={username} />
      ) : (
        <div style={{ padding: '2rem' }}>
          <h2>Join Chat</h2>
          <input
            placeholder="Enter username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
          />
          <button onClick={handleJoin}>Join</button>
        </div>
      )}
    </div>
  );
};

export default App;


// -----------------------------
// client/src/components/ChatRoom.jsx
// -----------------------------
import React, { useEffect, useState } from 'react';
import { io } from 'socket.io-client';

const socket = io('http://localhost:5000');

const ChatRoom = ({ username }) => {
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);
  const [typingUser, setTypingUser] = useState('');
  const [onlineUsers, setOnlineUsers] = useState([]);

  useEffect(() => {
    socket.emit('join', username);

    socket.on('chatMessage', (data) => {
      setMessages((prev) => [...prev, data]);
    });

    socket.on('notification', (msg) => {
      setMessages((prev) => [...prev, { username: 'System', message: msg, timestamp: '' }]);
    });

    socket.on('typing', (user) => {
      setTypingUser(user);
      setTimeout(() => setTypingUser(''), 1000);
    });

    socket.on('onlineUsers', (users) => {
      setOnlineUsers(users);
    });
  }, [username]);

  const sendMessage = () => {
    if (message.trim()) {
      socket.emit('chatMessage', { username, message });
      setMessage('');
    }
  };

  const handleTyping = () => {
    socket.emit('typing', username);
  };

  return (
    <div style={{ padding: '1rem' }}>
      <h3>Welcome, {username}</h3>
      <div><strong>Online Users:</strong> {onlineUsers.join(', ')}</div>

      <div style={{ height: '300px', overflowY: 'scroll', border: '1px solid #ccc', marginTop: '1rem' }}>
        {messages.map((msg, index) => (
          <div key={index}><strong>{msg.username}</strong>: {msg.message} <small>{msg.timestamp}</small></div>
        ))}
      </div>

      {typingUser && <p>{typingUser} is typing...</p>}

      <input
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        onKeyDown={handleTyping}
        placeholder="Type your message"
      />
      <button onClick={sendMessage}>Send</button>
    </div>
  );
};

export default ChatRoom;
